				;file C:\IOT-BU\Realtek IOT\Ameba SOC applications\ReedSwitch\main.c
				;1	//---------------------------------------------------
				;2	// 				;3	// Free-run the MCU, but still very low power.
				;4	//---------------------------------------------------
				;5	#include "HT66F002.h"		//				;6	#define ReedSwitch 	_pa1
				;7	#define Out_wifi	_pa6	//output
				;8	#define Sleep_info	_pa5
				;9	#pragma rambank0
				;10	unsigned char Rb;
				;11	unsigned char RbBuf;
				;12	unsigned char SwCnt;
				;13	unsigned char OutCnt;
				;14	bit ScanKey_F;
				;15	bit first_low_F;
				;16	bit first_high_F;
				;17	bit Get_Out_F;
				;18	
				;19	#pragma vector timer0_isr @ 0x10
				;20	void ClearRAM(void);
				;21	void ScanKey(void);
				;22	void Get_Out(void);
				;23	//------------------------------------------
				;24	//
				;25	//------------------------------------------
				;26	void main()
				@CODE .SECTION 'CODE'
				include HT66F002.inc
0000	200A	call    STARTSEC
0001	2811	jmp     begin
				@DUMMY .SECTION 'CODE'
0002	2011	call    begin
				STARTSEC:
				STARTUP:
				STARTSEC:
000A	0003	ret
000B	0000	nop
000C	0000	nop
000D	0000	nop
000E	0000	nop
000F	0000	nop
				;27	{
				;28		//_pac1 = 0;		//pa1 output mode.
				;29		//_papu2 = 1;		//pa2 be use pull up.
				;30		_pac6 = 0; 		//pa6 output for wifi enable.
				begin:
				_main:
				@MAIN .SECTION 'CODE'
0011	3715	clr     PAC6
				;31		Out_wifi = 0;	//to init. Ameba enable pin
0012	3714	clr     PA6
				;32		
				;33		ClearRAM();
0013	2061	call    _ClearRAM
				;34		_smod = 0b00000000;
0014	1F0B	clr     SMOD
				;35		_stm0c1 = 0b11000001;
0015	0FC1	mov     a, C1H
0016	00A9	mov     STM0C1, a
				;36		_stm0al = 0xee;
0017	0FEE	mov     a, EEH
0018	00AC	mov     STM0AL, a
				;37		_stm0ah = 0x00;
0019	1F2D	clr     STM0AH
				;38		_stma0e = 1;
001A	3091	set     STMA0E
				;39		_mf0e = 1;
001B	300F	set     MF0E
				;40		_emi = 1;
001C	300E	set     EMI
				;41		_stm0c0 = 0b00011000;
001D	0F18	mov     a, 18H
001E	00A8	mov     STM0C0, a
001F	2827	jmp     L3
				;42		while (1)
				L3:
				L7:
0027	2820	jmp     L2
				;43		{
				;44			_clrwdt();
				L2:
0020	0001	clr     wdt
				;45			if(ScanKey_F) ScanKey();
0021	39C4	snz     Get_Out_F[0].3
0022	2824	jmp     L5
0023	2029	call    _ScanKey
				;46			if(Get_Out_F) Get_Out();
				L5:
0024	3844	snz     Get_Out_F[0].0
0025	2827	jmp     L3
0026	2003	call    _Get_Out
				;47			
				;48		}
				;49	}
				L1:
0028	2828	jmp     $
				;50	//------------------------------------------
				;51	//
				;52	//------------------------------------------
				;53	void Get_Out(void)
				;54	{
				;55		if(OutCnt >= 10)
				_Get_Out:
				@Get_Out .SECTION 'CODE'
0003	0740	mov     a, OutCnt[0]
0004	0A0A	sub     a, AH
0005	380A	snz     C
0006	2809	jmp     L9
				;56		{
				;57			Get_Out_F = 0;
0007	3444	clr     Get_Out_F[0].0
				;58			Out_wifi = 0;		//finished output.
0008	3714	clr     PA6
				L9:
				L10:
0009	0003	ret
				;59		}
				;60	}
				;61	//------------------------------------------
				;62	//
				;63	//------------------------------------------
				;64	void ScanKey(void)
				;65	{
				;66		ScanKey_F = 0;
				_ScanKey:
				@ScanKey .SECTION 'CODE'
0029	35C4	clr     Get_Out_F[0].3
				;67		if(ReedSwitch)			//Reed switch High / Low detect. Please used external big regsiser.
002A	3894	snz     PA1
002B	282E	jmp     L13
				;68			Rb = 0;
002C	1F43	clr     Rb[0]
002D	2830	jmp     L14
				;69		else
				;70			Rb = 1;
				L13:
002E	0F01	mov     a, 1H
002F	00C3	mov     Rb[0], a
				;71	
				;72		if(Rb == RbBuf)
				L14:
0030	0743	mov     a, Rb[0]
0031	0442	xor     a, RbBuf[0]
0032	390A	snz     Z
0033	2853	jmp     L15
				;73		{
				;74			SwCnt++;
0034	14C1	inc     SwCnt[0]
				;75			if(SwCnt >= 4)
0035	0741	mov     a, SwCnt[0]
0036	0A04	sub     a, 4H
0037	380A	snz     C
0038	2856	jmp     L12
				;76			{
				;77				SwCnt = 4;
0039	0F04	mov     a, 4H
003A	00C1	mov     SwCnt[0], a
				;78				if(RbBuf == 1)
003B	0742	mov     a, RbBuf[0]
003C	0C01	xor     a, 1H
003D	390A	snz     Z
003E	2849	jmp     L19
				;79				{
				;80					first_low_F = 1;				
003F	3144	set     Get_Out_F[0].2
				;81					if(first_high_F)
0040	38C4	snz     Get_Out_F[0].1
0041	2856	jmp     L12
				;82					{
				;83						first_high_F = 0;
0042	34C4	clr     Get_Out_F[0].1
				;84						if(!Sleep_info)		//Low for Ameba sleep mode.
0043	3E94	sz      PA5
0044	2856	jmp     L12
				;85						{	
				;86							Out_wifi = 1;	//output port active.
0045	3314	set     PA6
				;87							Get_Out_F = 1;	//output flag
0046	3044	set     Get_Out_F[0].0
				;88							OutCnt = 0;		//output counting at time out of finished
0047	1F40	clr     OutCnt[0]
				;89						}
				;90					}
				;91				}else
0048	2856	jmp     L12
				;92				{
				;93					first_high_F = 1;								
				L19:
0049	30C4	set     Get_Out_F[0].1
				;94					if(first_low_F)
004A	3944	snz     Get_Out_F[0].2
004B	2856	jmp     L12
				;95					{
				;96						first_low_F = 0;
004C	3544	clr     Get_Out_F[0].2
				;97						if(!Sleep_info)		//Low for Ameba sleep mode.
004D	3E94	sz      PA5
004E	2856	jmp     L12
				;98						{
				;99							Out_wifi = 1;	//output port active.
004F	3314	set     PA6
				;100							Get_Out_F = 1;	//output flag
0050	3044	set     Get_Out_F[0].0
				;101							OutCnt = 0;		//output counting at time out of finished
0051	1F40	clr     OutCnt[0]
				;102						}
				;103					}				
				;104				}
				;105			}
				;106		}else
0052	2856	jmp     L12
				;107		{
				;108			SwCnt = 0;
				L15:
0053	1F41	clr     SwCnt[0]
				;109			RbBuf = Rb;
0054	0743	mov     a, Rb[0]
0055	00C2	mov     RbBuf[0], a
				L12:
				L16:
0056	0003	ret
				;110		}
				;111	}
				;112	//------------------------------------------
				;113	//	around 7~10ms
				;114	//------------------------------------------
				;115	void timer0_isr(void)
				;116	{
				@@timer0_isr .SECTION 'CODE'
0010	2857	jmp     _timer0_isr
				_timer0_isr:
				@timer0_isr .SECTION 'CODE'
0057	00C5	mov     V4A, a
0058	070A	mov     a, STATUS
0059	00C6	mov     V4S, a
				;117		_stma0f = 0;
005A	3691	clr     STMA0F
				;118		ScanKey_F = 1;
005B	31C4	set     Get_Out_F[0].3
				;119		OutCnt++;
005C	14C0	inc     OutCnt[0]
				L29:
005D	0746	mov     a, V4S
005E	008A	mov     STATUS, a
005F	0745	mov     a, V4A
0060	0004	reti
				;120	}
				;121	//------------------------------------------
				;122	//
				;123	//------------------------------------------
				;124	void ClearRAM(void)
				;125	{
				;126		for (_mp0 = 0x40; _mp0 < 0xff; _mp0++)
				_ClearRAM:
				@ClearRAM .SECTION 'CODE'
0061	0F40	mov     a, 40H
0062	0081	mov     MP0, a
0063	2866	jmp     L34
				L32:
0065	1481	inc     MP0
				L34:
0066	0701	mov     a, MP0
0067	0AFF	sub     a, FFH
0068	380A	snz     C
0069	2864	jmp     L31
				;127		{
				;128			_iar0 = 0;
				L31:
0064	1F00	clr     [00H]
				;129		}
				;130		_iar0 = 0;
006A	1F00	clr     [00H]
				L30:
006B	0003	ret
				;131	}
				data .SECTION 'DATA'
				OutCnt DB DUP (?) ; OutCnt
				SwCnt DB DUP (?) ; SwCnt
				RbBuf DB DUP (?) ; RbBuf
				Rb DB DUP (?) ; Rb
				V4A DB DUP (?)
				V4S DB DUP (?)
				Get_Out_F DB DUP (?) ; Get_Out_F
				first_high_F DB DUP (?) ; first_high_F
				first_low_F DB DUP (?) ; first_low_F
				ScanKey_F DB DUP (?) ; ScanKey_F
